<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<beans xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd" xmlns="http://www.springframework.org/schema/beans" xmlns:security="http://www.springframework.org/schema/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <bean class="com.wavemaker.runtime.security.SecurityService" id="securityService"/>
    <bean class="com.wavemaker.runtime.security.controller.SecurityController" id="securityController"/>
    <bean class="com.wavemaker.runtime.web.filter.SSLSecureFilter" id="sslSecureFilter"/>
    <bean class="com.wavemaker.runtime.security.xss.filter.WMXSSFilter" id="wmXSSFilter"/>
    <bean class="com.wavemaker.runtime.security.filter.WMFrameOptionsHeaderFilter" id="wmFrameOptionsFilter">
        <property name="frameOptions" ref="frameOptions"/>
    </bean>
    <bean class="com.wavemaker.commons.model.security.FrameOptions" id="frameOptions">
        <property name="enabled" value="${general.frameOptions.enabled}"/>
        <property name="mode" value="${general.frameOptions.mode}"/>
        <property name="allowFromUrl" value="${general.frameOptions.allowFromUrl}"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.filter.WMXContentTypeOptionsFilter" id="wmXContentTypeOptionsFilter"/>
    <bean class="org.springframework.web.filter.CorsFilter" id="corsFilter">
        <constructor-arg ref="corsConfigurationSource"/>
    </bean>
    <bean class="org.springframework.web.cors.UrlBasedCorsConfigurationSource" id="corsConfigurationSource"/>
    <bean class="com.wavemaker.runtime.cors.CorsBeanPostProcessor" id="corsBeanPostProcessor"/>
    <bean class="org.springframework.security.web.FilterChainProxy" id="wmCompositeSecurityFilter">
        <constructor-arg>
            <security:filter-chain pattern="/**" filters="sslSecureFilter, wmXSSFilter, wmFrameOptionsFilter, wmXContentTypeOptionsFilter,corsFilter"/>
        </constructor-arg>
    </bean>
    <bean class="com.wavemaker.runtime.data.spring.WMPropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>
                    classpath:securityService.properties
                </value>
            </list>
        </property>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="searchSystemEnvironment" value="true"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.config.WMAppSecurityConfig" id="WMAppSecurityConfig">
        <property name="sslConfig" ref="sslConfig"/>
        <property name="xssConfig" ref="xssConfig"/>
        <property name="enforceSecurity">
            <value>${enabled}</value>
        </property>
        <property name="rolesConfig" ref="rolesConfig"/>
        <property name="loginConfig" ref="loginConfig"/>
        <property name="tokenAuthConfig" ref="tokenAuthConfig"/>
        <property name="csrfConfig" ref="csrfConfig"/>
    </bean>
    <bean class="com.wavemaker.commons.model.security.SSLConfig" id="sslConfig">
        <property name="useSSL" value="${general.ssl.enabled}"/>
        <property name="sslPort" value="${general.ssl.port}"/>
        <property name="excludedUrls" value="#{null}"/>
    </bean>
    <bean class="com.wavemaker.commons.model.security.XSSConfig" id="xssConfig">
        <property name="enforceXssSecurity" value="${general.xss.enabled}"/>
        <property name="policyFile" value="wm-xss-policies.xml"/>
        <property name="xssFilterStrategy" value="ENCODE"/>
    </bean>
    <bean class="com.wavemaker.commons.model.security.CorsConfig" id="corsConfig">
        <property name="enabled" value="${general.cors.enabled}"/>
        <property name="maxAge" value="${general.cors.maxAge}"/>
        <property name="allowCredentials" value="${general.cors.allowCredentials}"/>
        <property name="pathEntries">
            <list>
                <bean class="com.wavemaker.commons.model.security.PathEntry" id="root">
                    <property name="name" value="root"/>
                    <property name="path" value="/**"/>
                    <property name="allowedOrigins" value="${general.cors.root.allowedOrigins}"/>
                </bean>
            </list>
        </property>
    </bean>
    <security:global-method-security pre-post-annotations="enabled" authentication-manager-ref="authenticationManager"/>
    <security:http pattern="/app.css" security="none"/>
    <security:http pattern="/app.js" security="none"/>
    <security:http pattern="/app.variables.json" security="none"/>
    <security:http pattern="/login.html" security="none"/>
    <security:http pattern="/favicon.png" security="none"/>
    <security:http pattern="/print.css" security="none"/>
    <security:http pattern="/wmProperties.js" security="none"/>
    <security:http pattern="/**/*.js" security="none"/>
    <security:http pattern="/**/*.css" security="none"/>
    <security:http pattern="/ng-bundle/**" security="none"/>
    <security:http pattern="/config.json" security="none"/>
    <security:http pattern="/types.js" security="none"/>
    <security:http pattern="/pages/Common/**" security="none"/>
    <security:http pattern="/pages/Login/**" security="none"/>
    <security:http pattern="/themes/**" security="none"/>
    <security:http pattern="/resources/**" security="none"/>
    <security:http pattern="/**/wmapp/**" security="none"/>
    <security:http pattern="/**/wmmobile/**" security="none"/>
    <security:http pattern="/app/prefabs/**" security="none"/>
    <security:http pattern="/services/application/wmProperties.js" security="none"/>
    <security:http pattern="/services/webprocess/**" security="none"/>
    <security:http auto-config="false" use-expressions="true" create-session="stateless" security-context-repository-ref="securityContextRepository" entry-point-ref="appAuthenticationEntryPoint" disable-url-rewriting="true" name="interceptUrlsBean" authentication-manager-ref="authenticationManager">
        <security:intercept-url pattern="/index.html" access="permitAll"/>
        <security:intercept-url pattern="/j_spring_security_check" access="permitAll"/>
        <security:intercept-url pattern="/j_spring_security_logout" access="permitAll"/>
        <security:intercept-url pattern="/pages/Login/**" access="permitAll"/>
        <security:intercept-url pattern="/services/application/i18n/**" access="permitAll"/>
        <security:intercept-url pattern="/services/prefabs/**/servicedefs" access="permitAll"/>
        <security:intercept-url pattern="/services/security/**" access="permitAll"/>
        <security:intercept-url pattern="/services/servicedefs" access="permitAll"/>
        <security:intercept-url pattern="/**" access="permitAll" method="OPTIONS"/>
        <security:intercept-url pattern="/" access="isAuthenticated()"/>
        <security:intercept-url pattern="/**" access="isAuthenticated()"/>
        <security:headers disabled="true"/>
        <security:csrf disabled="true"/>
        <security:request-cache ref="nullRequestCache"/>
        <security:custom-filter position="CSRF_FILTER" ref="wmcsrfFilter"/>
        <security:custom-filter before="PRE_AUTH_FILTER" ref="wmTokenBasedPreAuthenticatedProcessingFilter"/>
        <security:custom-filter position="LOGOUT_FILTER" ref="logoutFilter"/>
        <security:custom-filter after="SECURITY_CONTEXT_FILTER" ref="loginWebProcessFilter"/>
        <security:custom-filter position="BASIC_AUTH_FILTER" ref="WMBasicAuthenticationFilter"/>
        <security:custom-filter position="FORM_LOGIN_FILTER" ref="WMSecAuthFilter"/>
        <security:custom-filter position="REMEMBER_ME_FILTER" ref="rememberMeAuthFilter"/>
    </security:http>
    <bean class="com.wavemaker.runtime.security.csrf.WMCsrfFilter" id="wmcsrfFilter">
        <constructor-arg ref="csrfTokenRepository"/>
        <constructor-arg ref="csrfSecurityRequestMatcher"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.entrypoint.WMCompositeAuthenticationEntryPoint" id="appAuthenticationEntryPoint"/>
    <bean class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy" id="compositeSessionAuthenticationStrategy"/>
    <bean class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy" id="sessionFixationProtectionStrategy"/>
    <bean class="org.springframework.security.web.csrf.CsrfAuthenticationStrategy" id="csrfAuthenticationStrategy">
        <constructor-arg ref="csrfTokenRepository"/>
    </bean>
    <security:authentication-manager id="authenticationManager">
        <security:authentication-provider ref="databaseAuthenticationProvider"/>
        <security:authentication-provider ref="rememberMeAuthenticationProvider"/>
    </security:authentication-manager>
    <bean class="com.wavemaker.runtime.security.WMAppAccessDeniedHandler" id="wmAppAccessDeniedHandler"/>
    <bean class="com.wavemaker.runtime.security.csrf.WMCsrfTokenRepository" id="csrfTokenRepository">
        <constructor-arg>
            <bean class="com.wavemaker.runtime.security.csrf.WMHttpSessionCsrfTokenRepository">
                <property name="csrfConfig" ref="csrfConfig"/>
            </bean>
        </constructor-arg>
    </bean>
    <bean class="com.wavemaker.runtime.security.csrf.CsrfSecurityRequestMatcher" id="csrfSecurityRequestMatcher">
        <property name="csrfConfig" ref="csrfConfig"/>
    </bean>
    <bean class="org.springframework.security.web.authentication.logout.LogoutFilter" id="logoutFilter">
        <constructor-arg ref="logoutSuccessHandler"/>
        <constructor-arg>
            <list>
                <ref bean="securityContextLogoutHandler"/>
                <ref bean="wmCsrfLogoutHandler"/>
                <ref bean="rememberMeServices"/>
            </list>
        </constructor-arg>
        <property name="filterProcessesUrl" value="/j_spring_security_logout"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.csrf.WMCsrfLogoutHandler" id="wmCsrfLogoutHandler">
        <constructor-arg>
            <bean class="org.springframework.security.web.csrf.CsrfLogoutHandler">
                <constructor-arg ref="csrfTokenRepository"/>
            </bean>
        </constructor-arg>
    </bean>
    <bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" id="securityContextLogoutHandler"/>
    <bean class="org.springframework.security.web.savedrequest.NullRequestCache" id="nullRequestCache"/>
    <bean class="com.wavemaker.runtime.security.filter.WMTokenBasedPreAuthenticatedProcessingFilter" id="wmTokenBasedPreAuthenticatedProcessingFilter">
        <constructor-arg ref="authenticationManager"/>
        <constructor-arg ref="wmTokenBasedAuthenticationService"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.token.repository.WMTokenRepository" id="tokenRepository"/>
    <bean class="com.wavemaker.runtime.security.token.WMTokenBasedAuthenticationService" id="wmTokenBasedAuthenticationService"/>
    <bean class="com.wavemaker.runtime.security.handler.WMApplicationAuthenticationSuccessHandler" id="successHandler">
        <property name="defaultSuccessHandlerList">
            <list>
                <ref bean="wmSecurityContextRepositorySuccessHandler"/>
                <ref bean="wmCsrfTokenRepositorySuccessHandler"/>
                <ref bean="wmCsrfTokenResponseWriterAuthenticationSuccessHandler"/>
            </list>
        </property>
        <property name="authenticationSuccessRedirectionHandler" ref="wmAuthenticationSuccessRedirectionHandler"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.handler.WMAuthenticationSuccessRedirectionHandler" id="wmAuthenticationSuccessRedirectionHandler"/>
    <bean class="com.wavemaker.runtime.security.handler.WMCsrfTokenRepositorySuccessHandler" id="wmCsrfTokenRepositorySuccessHandler">
        <constructor-arg ref="csrfTokenRepository"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.handler.WMCsrfTokenResponseWriterAuthenticationSuccessHandler" id="wmCsrfTokenResponseWriterAuthenticationSuccessHandler">
        <constructor-arg ref="csrfTokenRepository"/>
    </bean>
    <bean class="org.springframework.security.web.context.HttpSessionSecurityContextRepository" id="securityContextRepository">
        <property name="disableUrlRewriting" value="true"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.handler.WMSecurityContextRepositorySuccessHandler" id="wmSecurityContextRepositorySuccessHandler">
        <constructor-arg ref="securityContextRepository"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.WMAuthenticationFailureHandler" id="failureHandler"/>
    <bean class="com.wavemaker.commons.model.security.LoginConfig" id="loginConfig">
        <property name="pageName" value="Login"/>
        <property name="sessionTimeout">
            <bean class="com.wavemaker.commons.model.security.SessionTimeoutConfig">
                <property name="pageName" value=""/>
                <property name="timeoutValue" value="${general.session.timeout}"/>
                <property name="type">
                    <value type="com.wavemaker.commons.model.security.LoginType">DIALOG</value>
                </property>
            </bean>
        </property>
        <property name="type">
            <value type="com.wavemaker.commons.model.security.LoginType">PAGE</value>
        </property>
    </bean>
    <bean class="com.wavemaker.commons.model.security.CSRFConfig" id="csrfConfig">
        <property name="enforceCsrfSecurity" value="${general.xsrf.enabled}"/>
        <property name="headerName" value="X-WM-XSRF-TOKEN"/>
    </bean>
    <bean class="com.wavemaker.commons.model.security.RolesConfig" id="rolesConfig">
        <property name="roleMap">
            <description>Roles based landing page definitions</description>
            <map key-type="java.lang.String" value-type="com.wavemaker.commons.model.security.RoleConfig">
                <entry key="admin">
                    <bean class="com.wavemaker.commons.model.security.RoleConfig">
                        <property name="landingPage" value="Main"/>
                    </bean>
                </entry>
                <entry key="user">
                    <bean class="com.wavemaker.commons.model.security.RoleConfig">
                        <property name="landingPage" value="Main"/>
                    </bean>
                </entry>
            </map>
        </property>
    </bean>
    <bean class="com.wavemaker.commons.model.security.TokenAuthConfig" id="tokenAuthConfig">
        <property name="enabled" value="${general.tokenService.enabled}"/>
        <property name="parameter" value="${general.tokenService.parameter}"/>
        <property name="tokenValiditySeconds" value="${general.tokenService.tokenValiditySeconds}"/>
    </bean>
    <bean class="com.wavemaker.runtime.webprocess.filter.LoginProcessFilter" id="loginWebProcessFilter"/>
    <bean class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter" id="WMSecAuthFilter">
        <property name="authenticationSuccessHandler" ref="successHandler"/>
        <property name="authenticationFailureHandler" ref="failureHandler"/>
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="filterProcessesUrl" value="/j_spring_security_check"/>
        <property name="usernameParameter" value="j_username"/>
        <property name="passwordParameter" value="j_password"/>
        <property name="sessionAuthenticationStrategy" ref="compositeSessionAuthenticationStrategy"/>
        <property name="rememberMeServices" ref="rememberMeServices"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.filter.WMBasicAuthenticationFilter" id="WMBasicAuthenticationFilter">
        <constructor-arg ref="authenticationManager"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.WMAuthenticationEntryPoint" id="WMSecAuthEntryPoint">
        <constructor-arg value="/index.html"/>
    </bean>
    <bean class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler" id="logoutSuccessHandler">
        <property name="defaultTargetUrl" value="/"/>
        <property name="redirectStrategy" ref="redirectStrategyBean"/>
    </bean>
    <bean class="org.springframework.security.web.DefaultRedirectStrategy" id="redirectStrategyBean"/>
    <bean class="org.springframework.security.authentication.dao.DaoAuthenticationProvider" id="databaseAuthenticationProvider">
        <property name="userDetailsService" ref="jdbcDaoImpl"/>
        <property name="passwordEncoder" ref="passwordEncoder"/>
    </bean>
    <bean class="org.springframework.security.crypto.password.NoOpPasswordEncoder" id="passwordEncoder"/>
    <bean class="com.wavemaker.runtime.security.provider.database.users.DefaultUserProviderImpl" id="defaultUserProvider">
        <property name="usersByUsernameQuery">
            <value>SELECT userId, password, 1, username FROM User WHERE username = ?</value>
        </property>
        <property name="hql" value="true"/>
        <property name="hibernateTemplate">
            <ref bean="hrdbTemplate"/>
        </property>
        <property name="transactionManager">
            <ref bean="hrdbTransactionManager"/>
        </property>
    </bean>
    <bean class="com.wavemaker.runtime.security.provider.database.authorities.DefaultAuthoritiesProviderImpl" id="defaultAuthoritiesProvider">
        <property name="hql" value="true"/>
        <property name="rolePrefix">
            <value>ROLE_</value>
        </property>
        <property name="authoritiesByUsernameQuery">
            <value>SELECT userId, 'DEFAULT_NO_ROLES' FROM User WHERE username = ?</value>
        </property>
        <property name="rolesByQuery" value="true"/>
        <property name="hibernateTemplate">
            <ref bean="hrdbTemplate"/>
        </property>
        <property name="transactionManager">
            <ref bean="hrdbTransactionManager"/>
        </property>
    </bean>
    <bean class="com.wavemaker.runtime.security.provider.database.DatabaseUserDetailsService" id="jdbcDaoImpl">
        <property name="userProvider">
            <ref bean="defaultUserProvider"/>
        </property>
        <property name="authoritiesProvider">
            <ref bean="defaultAuthoritiesProvider"/>
        </property>
    </bean>
    <bean class="org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices" id="rememberMeServices">
        <constructor-arg value="WM_APP_KEY"/>
        <constructor-arg ref="rememberMeRepository"/>
        <property name="parameter" value="j_rememberme"/>
        <property name="tokenValiditySeconds" value="${general.rememberMe.timeOut}"/>
        <constructor-arg ref="jdbcDaoImpl"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.rememberme.WMRememberMeAuthenticationFilter" id="rememberMeAuthFilter">
        <constructor-arg ref="authenticationManager"/>
        <constructor-arg ref="rememberMeServices"/>
        <property name="authenticationSuccessHandler" ref="rememberMeAuthenticationSuccessHandler"/>
    </bean>
    <bean class="org.springframework.security.authentication.RememberMeAuthenticationProvider" id="rememberMeAuthenticationProvider">
        <constructor-arg value="WM_APP_KEY"/>
    </bean>
    <bean class="org.springframework.security.web.authentication.rememberme.InMemoryTokenRepositoryImpl" id="rememberMeRepository"/>
    <bean class="com.wavemaker.runtime.security.handler.WMApplicationAuthenticationSuccessHandler" id="rememberMeAuthenticationSuccessHandler">
        <property name="defaultSuccessHandlerList">
            <list>
                <ref bean="wmSecurityContextRepositorySuccessHandler"/>
                <ref bean="wmCsrfTokenRepositorySuccessHandler"/>
            </list>
        </property>
    </bean>
</beans>
